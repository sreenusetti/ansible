---
- name: Precheck SSH connectivity
  hosts: all
  gather_facts: false
  ignore_unreachable: true # Good practice: Don't fail the whole run if one host is down

  tasks:
    - name: 0.1 Ping the host to verify SSH access
      ansible.builtin.ping:

- name: Check System Resources and Log Status
  hosts: all
  gather_facts: false

  vars:
    ram_threshold: 60.0
    cpu_threshold: 80.0
    # --- SOLUTION ---
    # Change the log path to a location writable by the 'runner' user inside the
    # AWX Execution Environment. The '/runner/project/' directory is the standard
    # location for job artifacts. This avoids the need for `sudo`.
    log_file_path: "health_check_output.log" # This file will be created in the project directory

    # Central map for OS-specific metrics. Makes the playbook easier to read and extend.
    metrics_map:
      # Define Linux metrics once using a YAML anchor (&)
      linux_base_metrics: &linux_metrics
        cpu_load_raw: "{{ ansible_facts.load_avg[0] | default(0) | float }}"
        cpu_cores: "{{ (ansible_facts.processor_vcpus | default(ansible_facts.processor_cores | default(1) | int) * ansible_facts.processor_count | default(1) | int) }}"

      # Apply the Linux metrics to RedHat and Debian using a YAML alias (*)
      RedHat: *linux_metrics
      Debian: *linux_metrics

      Windows:
        # For Windows, the CPU percentage is already normalized.
        # We set cores to 1 to make the final calculation formula consistent.
        cpu_load_raw: "{{ ansible_facts.processor_load.Processor._Total | default(0) | float }}"
        cpu_cores: 1

  tasks:
    - name: 1. Gather minimal facts (OS family, datetime)
      ansible.builtin.setup:
        gather_subset:
          - "!all"
          - os_family
          - date_time

    - name: 2. Gather hardware facts for supported OS families
      when: ansible_facts.os_family in metrics_map
      ansible.builtin.setup:
        gather_subset:
          - hardware
          - loadavg # For Linux

    # Use a block to perform calculations and a rescue to handle any errors gracefully.
    - name: 3. Calculate and Log Health Metrics
      block:
        - name: 3a. Set OS-specific metric variables
          when: ansible_facts.os_family in metrics_map
          ansible.builtin.set_fact:
            os_metrics: "{{ metrics_map[ansible_facts.os_family] }}"

        - name: 3b. Perform common RAM and CPU calculations
          ansible.builtin.set_fact:
            total_ram_mb: "{{ ansible_facts.memtotal_mb | default(0) | int }}"
            free_ram_mb: "{{ ansible_facts.memfree_mb | default(0) | int }}"
            used_ram_mb: "{{ (ansible_facts.memtotal_mb | int) - (ansible_facts.memfree_mb | int) }}"
            ram_usage_percent: >-
              {{ (( (ansible_facts.memtotal_mb - ansible_facts.memfree_mb) / ansible_facts.memtotal_mb) * 100) | round(2) }}
            cpu_load_percent: >-
              {{ ((os_metrics.cpu_load_raw / os_metrics.cpu_cores) * 100) | round(2) if os_metrics.cpu_cores > 0 else 0 }}

        - name: 3c. Set health status based on thresholds
          ansible.builtin.set_fact:
            ram_status: "{{ 'Critical' if ram_usage_percent > ram_threshold else 'Good' }}"
            cpu_status: "{{ 'Critical' if cpu_load_percent > cpu_threshold else 'Good' }}"

        - name: 3d. Format success log message
          ansible.builtin.set_fact:
            log_message: >-
              [{{ ansible_facts.date_time.iso8601 }}]
              HOST={{ inventory_hostname }}
              OS={{ ansible_facts.os_family }}
              RAM_USAGE={{ ram_usage_percent }}% ({{ ram_status }})
              CPU_USAGE={{ cpu_load_percent }}% ({{ cpu_status }})

      rescue:
        - name: 3e. Format error log message
          ansible.builtin.set_fact:
            log_message: >-
              [{{ ansible_facts.date_time.iso8601 }}]
              HOST={{ inventory_hostname }}
              STATUS=Error
              MESSAGE="Failed to gather or calculate system metrics. OS may be unsupported or facts unavailable."

    - name: 4. Show result in AWX output
      ansible.builtin.debug:
        msg: "{{ log_message }}"

    - name: 5. Append result to central log file
      delegate_to: localhost
      # --- SOLUTION ---
      # Remove `become: true`. We are now writing to a path where the execution
      # user has permissions, so privilege escalation is not needed.
      ansible.builtin.lineinfile:
        path: "{{ log_file_path }}"
        line: "{{ log_message }}"
        create: true
        mode: "0644"
