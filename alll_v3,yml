---
- name: Check System Resources and Log Status
  hosts: all
  gather_facts: false

  vars:
    ram_threshold: 60.0
    cpu_threshold: 80.0
    log_file_path: "/var/log/awx/output.log"

  tasks:

    - name: 1. Gather minimal facts (OS family, datetime)
      ansible.builtin.setup:
        gather_subset:
          - "!all"
          - "os_family"
          - "date_time"

    - name: 2. Gather hardware facts for supported OS families
      when: ansible_facts['os_family'] in ["RedHat", "Debian", "Windows"]
      ansible.builtin.setup:
        gather_subset:
          - hardware
          - loadavg

    - name: 3a. Set OS-specific metric variables
      ansible.builtin.set_fact:
        os_metrics:
          total_ram_mb: "{{ ansible_facts.memtotal_mb | default(0) | int }}"
          free_ram_mb: "{{ ansible_facts.memfree_mb | default(0) | int }}"
          cpu_cores: >-
            {{ (ansible_facts.processor_cores | default(1) | int) *
               (ansible_facts.processor_count | default(1) | int) }}
          cpu_load_raw: "{{ ansible_facts.load_avg[0] | default(0.0) | float }}"
      when: ansible_facts.memtotal_mb is defined

    - name: 3b. Perform common RAM and CPU calculations
      block:
        - name: Set RAM and CPU usage %
          ansible.builtin.set_fact:
            used_ram_mb: "{{ os_metrics.total_ram_mb - os_metrics.free_ram_mb }}"
            ram_usage_percent: "{{ ((used_ram_mb / os_metrics.total_ram_mb) * 100) | round(2) }}"
            cpu_load_percent: >-
              {{ ((os_metrics.cpu_load_raw | float) /
                  (os_metrics.cpu_cores | float)) * 100 | round(2) if (os_metrics.cpu_cores | float) > 0 else 0 }}
            ram_status: "{{ 'Critical' if ram_usage_percent > ram_threshold else 'Good' }}"
            cpu_status: "{{ 'Critical' if cpu_load_percent > cpu_threshold else 'Good' }}"
      rescue:
        - name: 3e. Format error log message
          ansible.builtin.set_fact:
            log_message: >-
              [{{ ansible_facts.date_time.iso8601 }}] HOST={{ inventory_hostname }}
              STATUS=Error MESSAGE="Failed to gather or calculate system metrics. OS may be unsupported or facts unavailable."

    - name: 4. Show result in AWX output
      ansible.builtin.debug:
        msg: >-
          {{ log_message | default(
            "[%s] HOST=%s OS=%s RAM_USAGE=%.2f%% (%s) CPU_USAGE=%.2f%% (%s)" | format(
              ansible_facts.date_time.iso8601,
              inventory_hostname,
              ansible_facts.os_family,
              ram_usage_percent | default(0),
              ram_status | default('Unknown'),
              cpu_load_percent | default(0),
              cpu_status | default('Unknown')
            )
          ) }}

    - name: 5. Append result to central log file
      ansible.builtin.lineinfile:
        path: "{{ log_file_path }}"
        line: >-
          {{ log_message | default(
            "[%s] HOST=%s OS=%s RAM_USAGE=%.2f%% (%s) CPU_USAGE=%.2f%% (%s)" | format(
              ansible_facts.date_time.iso8601,
              inventory_hostname,
              ansible_facts.os_family,
              ram_usage_percent | default(0),
              ram_status | default('Unknown'),
              cpu_load_percent | default(0),
              cpu_status | default('Unknown')
            )
          ) }}
        create: true
        mode: "0644"
      delegate_to: localhost
      become: true
