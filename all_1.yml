---
- name: Precheck SSH connectivity
  hosts: all
  gather_facts: false

  tasks:
    - name: 0.1 Ping the host to verify SSH access
      ansible.builtin.ping:

# ===================================================================
# == SYSTEM RESOURCE CHECK & LOGGING
# ===================================================================

- name: Check System Resources and Log Status
  hosts: all
  gather_facts: false

  vars:
    ram_threshold: 60.0
    cpu_threshold: 80.0
    log_file_path: "/var/log/awx/output.log"

  tasks:

    - name: 1. Gather only OS and time info first
      ansible.builtin.setup:
        gather_subset:
          - "os_family"
          - "date_time"

    # ===================================================================
    # == LINUX SECTION
    # ===================================================================
    - name: 2a. Gather full facts for Linux
      when: ansible_os_family in ["RedHat", "Debian"]
      ansible.builtin.setup:
        gather_subset:
          - "hardware"
          - "virtual"
          - "network"
          - "loadavg"
          - "date_time"

    - name: 2b. Extract raw Linux values
      when: ansible_os_family in ["RedHat", "Debian"]
      ansible.builtin.set_fact:
        total_ram_mb_raw: "{{ ansible_facts.memtotal_mb | default(0) }}"
        free_ram_mb_raw: "{{ ansible_facts.memfree_mb | default(0) }}"
        cpu_cores_raw: "{{ ansible_facts.processor_cores | default(1) }}"
        cpu_count_raw: "{{ ansible_facts.processor_count | default(1) }}"
        load_avg_1min: "{{ ansible_facts.load_avg[0] | default(0) }}"

    - name: 2c. Calculate Linux RAM/CPU usage
      when: ansible_os_family in ["RedHat", "Debian"]
      ansible.builtin.set_fact:
        used_ram_mb: "{{ total_ram_mb_raw - free_ram_mb_raw }}"
        ram_usage_percent: "{{ ((used_ram_mb / total_ram_mb_raw) * 100) | round(2) if total_ram_mb_raw > 0 else 0 }}"
        cpu_count: "{{ cpu_cores_raw * cpu_count_raw }}"
        cpu_load_percent: "{{ ((load_avg_1min / cpu_count) * 100) | round(2) if cpu_count > 0 else 0 }}"

    # ===================================================================
    # == WINDOWS SECTION
    # ===================================================================
    - name: 2d. Set Windows RAM and CPU usage facts
      when: ansible_os_family == "Windows"
      ansible.builtin.set_fact:
        total_ram_mb: "{{ ansible_facts.memtotal_mb }}"
        used_ram_mb: "{{ ansible_facts.memtotal_mb - ansible_facts.memfree_mb }}"
        ram_usage_percent: "{{ ((used_ram_mb / total_ram_mb) * 100) | round(2) }}"
        cpu_load_percent: "{{ ansible_facts.processor_load | default(0) }}"

    # ===================================================================
    # == COMMON LOGIC
    # ===================================================================
    - name: 3. Set RAM/CPU status flags
      ansible.builtin.set_fact:
        ram_status: "{{ 'Critical' if ram_usage_percent > ram_threshold else 'Good' }}"
        cpu_status: "{{ 'Critical' if cpu_load_percent > cpu_threshold else 'Good' }}"

    - name: 4. Format the log message
      ansible.builtin.set_fact:
        log_message: >-
          [{{ ansible_facts.date_time.iso8601 }}]
          HOST={{ inventory_hostname }}
          OS={{ ansible_os_family }}
          RAM={{ ram_usage_percent }}% ({{ ram_status }})
          CPU={{ cpu_load_percent }}% ({{ cpu_status }})

    # ===================================================================
    # == OUTPUT
    # ===================================================================
    - name: 5. Display the result in AWX job output
      ansible.builtin.debug:
        msg: "{{ log_message }}"

    - name: 6. Append result to the central log file on the controller
      ansible.builtin.lineinfile:
        path: "{{ log_file_path }}"
        line: "{{ log_message }}"
        create: true
        mode: "0644"
      delegate_to: localhost
      become: true
